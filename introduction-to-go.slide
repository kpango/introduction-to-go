Introduction to Go
17 Jan 2017

Yusuke Kato
i.can.feel.gravity@gmail.com
https://github.com/kpango
@kpango

* License and Materials

This presentation is a Japanese translation of [[https://dave.cheney.net][davecheney]]'s presentation, and the licensed under the [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/kpango/introduction-to-go

You are encouraged to remix, transform, or build upon the material, providing you give appropriate credit and distribute your contributions under the same license.

If you have suggestions or corrections to this presentation, please raise [[https://github.com/kpango/introduction-to-go/issues][an issue on the GitHub project]].

* アジェンダ

このプレゼンテーションは他のプログラミング言語の経験者向けにGo言語のスキルを習得してもらうためのスライドです。

全体を通して下記の5つのセクションに分かれています。

- 基礎文法
- 応用文法
- 開発環境とツール
- 標準ライブラリ
- パッケージとアプリケーション

質問は随時受け付けています

このワークショップでは講義の時間よりも実践の時間を多くとることでGo言語についての理解を早くしています。

* The Go programming language

- Modern
- コンパクト、簡潔、汎用的
- 命令的、静的型チェック、動的型安全
- ガベージコレクション
- ネイティヴコードへのコンパイル、スタティックリンク
- 高速にコンパイルでき、高速に動作する

プログラマーのためにプログラマーが設計した言語

.link https://talks.golang.org/2014/taste.slide#2 Source: Robert Griesemer, A Taste of Go.

* Speed

Go言語は高速であるという記述がしばしば見受けられます、しかしこれはGo言語における要素のほんの一面でしかありません。

「静的言語が「遅くて苦痛」であり、動的言語が「速くて楽しい」という誤った二分法が行われている」-Rob Pike

「洗練されていない型システムは人々を動的言語へと誘導してしまう」 -  Robert Griesemer

Go言語はプログラマーのために言語が高速に早いプログラムを構築できるという生産性を証明しようとする試みです。

* Safety

- 型と型安全

 var i int = -1
 var u uint = 200
 i = u   //型の不一致によりエラー 

- 配列へのアクセスは、配列長がチェックされる

 s := make([]string, 10)
 x := s[20] //runtime panic

- 初期化されていない変数のメモリ空間は0である

 var q int       // initialised to 0
 var f = 7       // initialised to 7, type defaults to int

- 暗黙的型変換は存在しないため、intとboolはエイリアスではありません

 i := 2
 if i { ... }    // bool値ではないためエラー

* 並行性のための優れた機能

- マルチコアCPU対応
- マルチプロセスではありません
- ランタイムに統合された標準ネットワークライブラリが充実

* ガベージコレクション

Go言語はGC言語です

- 共有された値に対する所有権に関連するエラーを排除します
- メモリリークや解放された空間にアクセスすることによるバグを排除します
- シンプルで簡潔なAPIが使えます

ガベージコレクタは100GBの範囲でヒープを処理していて、「ストップザワールド」を極端に少なくするように設計されています

Go言語1.7では100μs以下となっています。

* Opinionated

Go言語は非常に厳格な言語です

- 使用されてない変数があれば、それはエラーです
- 使用されていないimportもエラーです
- コンパイラーは警告を問題とせす、エラーのみを問題とします
- go fmt コマンドによってソースコードフォーマットが統一されています

* Hello, http!

.play -edit src/hellohttp/hellohttp.go

* Basic Syntax

* Basic Syntax 

このセクションでは、短いGoのプログラムを通してGo言語の基礎文法を見ていこうと思います

このセクションのソースコードは実行可能形式となっています

このセクションの終わりには下記の要素が習得できているでしょう

- 変数、定数の宣言
- for, if などの文法
- 型の挙動
- 独自定義の関数の宣言方法
- パッケージとimportの挙動など

* Constants

定数は変更される事の無い値です

定数の例が以下です:

 1
 "hello"
 false
 1.3

これらはリテラル定数と呼ばれ、それぞれを評価する値が定数そのものとなっています

* Types of constants

以下に6種類の定数があります:

- 整数型 定数 (uint8...uint64, int8...int64): `1`, `0`, `-6`, `9999999999999999999`, …
- 浮動小数点数型 定数 (float32, float64,): `3.14`, `7.5e-2`, …
- 虚数型 定数 (complex64, complex128): `1`-`0.707i`, …
- 文字列型 定数 (string): `"Hello,`東京"`, … 
- 文字 定数 (rune): `'a'`, `'す'`, `'シ'`, `'1'`, …
- 理論値型 定数(bool): `true`, `false`

* const

定数を作るには、constを使います

.play -edit src/const/const1/main.go /START OMIT/,/END OMIT/

スライドの *Run* ボタンを押すことで実行できます

- *Run* ボタンを押してみて何が起こるか確認してみてください
- *Close* ボタンでWindowを閉じることができます

また、スライド中のコードを編集することもできます

- 名前を変更してみてください
- Go言語のすべてのソースはUTF-8なので、
- *Run* ボタンを押して結果を確認してみてください
- 間違えた場合は、ページをリロードしてください

* Identifiers

次に識別子についてお話しします

Goの識別子は文字で始めなければいけません

.play -edit src/identifier/identifier1/main.go /START OMIT/,/END OMIT/

文字はUnicode文字であれば、漢字、キリル文字、ラテン文字など様々な文字が使えます

- 識別子はASCIIに限定されないため、コードの `students` を `学生` に変更し、 *Run* を押してみてください
- 間違えた場合は、ページをリロードしてください

* Identifiers (cont.)

識別子はUnicode文字か `_` で始まる必要があります

数値は始まりには使えませんが、文字列中には使うことができます

.play -edit src/identifier/identifier2/main.go /START OMIT/,/END OMIT/

こちらに無効な識別子のサンプルがあります

- プログラムが通るように識別子を変更してみてください
- *Run* ボタンを押して結果を確認してみてください
- 間違えた場合は、ページをリロードしてください

* Comments

Go言語では2種類のコメントをサポートしています

- インラインコメントは、二重のスラッシュ「//」で始まります
- スラッシュとスター「 `/*` 」で始まり、スターとスラッシュ「 `*/` 」で終わるコメントをブロックします

.play -edit src/comments/comments1/main.go /START OMIT/,/END OMIT/

コメントアウトされたコードはコンパイルまたは実行されません

- このプログラムのコメントを削除してコンパイルします
-  *Run* ボタンを押して結果を確認し、 `1`2`3` をコンパイルして出力します
- 間違えた場合は、ページをリロードしてください

* Declarations

Goには6種類の宣言がありますが、すでにそれらのうちの1つを見てきました。

以下6種類です:

- `const`: 定数宣言
- `var`: 変数宣言
- `type`: 型宣言
- `func`: メソッドの宣言
- `package`: goソースが属するパッケージの宣言
- `import`: importするパッケージの宣言

このセクションでは定数以外の残りの5つの宣言についてそれぞれ説明します

* Variables

変数はミュータブルな値を保持します

`var` を用いて新しい変数を宣言することができます

.play -edit src/variable/variable1/main.go /START OMIT/,/END OMIT/

定数と同じように、変数の識別子には任意の有効なUnicode文字を使うことができます

- *Run* ボタンを押して結果を確認してみてください
- 間違えた場合は、ページをリロードしてください

_note_: 円周率の表示がおかしいですが、これは後で `fmt` パッケージを用いることで修正を行います

* Unused variable declarations

未使用の変数はバグの温床となります、そのため、Goコンパイラはあなたの関数スコープに定義されている変数が未使用の場合エラーを吐き出します

変数が使用されていない場合は、それを削除するか、一時的に `_` という名前のマジック変数に代入してください

.play -edit src/variable/variable2/main.go /START OMIT/,/END OMIT/

このプログラムには4つの未使用変数があります

- 下の2行のコメントを削除してプログラムを修正します
- 「自転車」の宣言は、使用されていないので、削除またはコメントアウトします
- *Run* ボタンを押して、プログラムがコンパイルされていることを確認します

* 命令文

_命令文_ は何かをするためのコマンドです:

- _新しいint値xの宣言と値10の割り当て_
- _xの値に4を足し、結果yへの格納_
- _xが20より小さい間は、これらの命令文を行う_

Goの命令文にはいくつかの種類があり、私達は既にいくつか見ています。最も一般的な命令文は:

- 宣言: `const`pi`=`3.14159265359`, `type`Counter`int32`, …
- 代入: `count`=`count`+`1`, …
- インクリメント/デクリメント: `x++`, `y--`
- 条件文: `if`…`{`…`}`else`{`…`}`, `switch`{`…`}`
- ループ: `for`…`{`…`}`
- 制御フロー: `break`, `fallthrough`, `continue`, `goto`, `return`.

* 代入

変数に保存された値を変更したい時に使い、 _代入_ と呼ばれます。

.play -edit src/assignment/assignment1/main.go /START OMIT/,/END OMIT/

この例では、以下を示します

- *Run* を押し、プログラムが `1`, `2`, `4` を表示することをチェックして下さい。
# - Update the program to declare a new variable, `z`, which has a value 2x larger than `y`.

* 代入 (続き)

_変数_ にのみ新しい値を代入することができます。

.play -edit src/assignment/assignment2/main.go /START OMIT/,/END OMIT/

定数に新しい値を代入するとシンタックスエラーになります。

- *Run* を押し、プログラムがコンパイルできないことを見て下さい。
- `x` の宣言を定数( `const` )から変数( `var` )に変更するために、サンプルコードを編集して下さい。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの2を表示することをチェックして下さい。

* インクリメントとデクリメント

Goは変数のポストインクリメントとポストデクリメントの限られた形式をサポートします。例. `x++`, `x--`.

.play -edit src/increment/increment1/main.go /START OMIT/,/END OMIT/

- *Run* を押し、プログラムが `2` を表示することを見て下さい。
- サンプルコードを編集し、デクリメント演算子 `i--` を使用して、 `i` から `1` を減算してください。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの0を表示することをチェックして下さい。

* インクリメントとデクリメント (続き)

`i++` と `i--` は _命令文_ であり、 _式_ ではありません、それらは値を生成しません。

.play -edit src/increment/increment2/main.go /START OMIT/,/END OMIT/

このプログラムはシンタックスエラーになります。

- サンプルコードを編集し、 `var`  `j` の宣言の上に `i++` 命令文を移動してエラーを訂正して下さい。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの2, 2を表示することをチェックして下さい。

* ループ

Goにはただ1つの `for` ループがあります

- `while` _条件_ `{`…`}`
- `do`{`…`}`while` _条件_
- `do`{`…`}`until` _条件_

は1つの構文になります。

- `for` _(init文)_; _条件_; _(post文)_ `{`…`}`

`for` 命令文の要素は:

- init文: ループ変数の初期化に使用される; `i`=`0`.
- 条件: ループが完了したかどうかをテストに使用される; `i`<`10`, `true` はループの維持を意味します。
- post文: ループ変数のインクリメントに使用される; `i++`, `i`=`i`-`1`.

* ループ (続き) 

ループの使用法を練習しましょう。

.play -edit src/loops/loops1/main.go /START OMIT/,/END OMIT/

このプログラムは `1` から `10` までをカウントします、_偶数_だけを表示するようにできますか？

- プログラムを編集し、 `1` から `10` までの間の偶数を全て表示してください。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの `2`, `4`, `6`, `8`, `10` を表示することをチェックして下さい。

_注意_: `for` の条件文の周りに `(` 括弧 `)` は必要ありません。実際に、それはシンタックスエラーになります、やってみて下さい。

* ループ (続き) 

カウントダウンの練習をしましょう、これは他の言語で `while` ループを使う場所です。

.play -edit src/loops/loops2/main.go /START OMIT/,/END OMIT/

このプログラムは `10` から `1` までカウントダウンします、 `7` から `3` までのカウントダウンにできますか？

- プログラムを編集し、 `7` から `3` までの数字だけを表示してください。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの `7`, `6`, `5`, `4`, `3` を表示することをチェックして下さい。

_注意_: この `for` ループは _条件_ だけを持ち、 _init文_ と _post文_ はありません、そのためセミコロン `;` は必要ありません。

* 条件文

Goは `if` と `switch` の2つの条件文があります。

`if` は _条件_ に基づいて2つの選択肢の中から選択するために使用されます。

 if v > 0 {
         println("v is greater than zero")
 } else {
         println("v is less than or equal to zero")
 }

ある場合には、`else` ブロックの本体は省略できます。これは、関数のメソッドの前提条件をチェックするときに非常に一般的です。

 if v == 0 {
         // nothing to do
         return
 }
 // handle v

* if

以前の偶数の `for` ループの例を見てみましょう。

.play -edit src/conditionals/conditionals1/main.go /START OMIT/,/END OMIT/

このプログラムは `1` から `10` までをカウントします、 _偶数_ だけを表示するようにできますか？

- `if`i%2`==`0`{` と `}` の行のコメントをはずし、 `1` から `10` までの間の偶数のみ表示するプログラムを作成して下さい。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの `2`, `4`, `6`, `8`, `10` を表示することをチェックして下さい。

_注意_:  `%`  はGoの _剰余_ 演算子です。全ての偶数は `2` で割り切ることができ、 _剰余_ として `0` が残ります。

* continue

Javaのような言語とは異なり、Goの `if` 文は _ガード節_ としてよく使われます。

すべてが真であれば、コードはページの上から下に読み込まれます。

ループの本体を _スキップ_ する新しい命令文 `continue` を使い、以前のプログラムを書き直すことができます。

.play -edit src/conditionals/conditionals2/main.go /START OMIT/,/END OMIT/

- `if`i%1`==`1`{`, `continue`, `}` の行のコメントをはずして下さい。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの `2`, `4`, `6`, `8`, `10` を表示することをチェックして下さい。

* break

このプログラムは _無限ループ_ です。 `for` ループに条件式がありません。

_現在_ のループから抜け出す `break` 文を使用して修正することができます。

.play -edit src/conditionals/conditionals3/main.go /START OMIT/,/END OMIT/

- `if`i`>`10`{`, `break`, `}` の行のコメントをはずして下さい。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの `2`, `4`, `6`, `8`, `10` を表示することをチェックして下さい。

* 型推論

これまでの例では、型についての話は避けましたが、これはGoが _型推論_ をサポートしているためです。

型推論を使用すると、宣言時に変数の型を省略できます。

例:

 var i = 7

Goは `i` が `7` という値で宣言され、初期化されていることを知っているので、コンパイラは `i` の型を `int` と推定します。

しかし、もし以下の場合は、

 var s = "seven"

Goは `s` が _文字列_  `"seven"` で初期化されていることを知っているので、コンパイラは `s` の型を `string` と推定します。

* 明示的な型宣言

場合によっては、Goに特定の型を使用するよう指示することもあります。

これは、変数を宣言するときに行います:

 var i int = 4
 var s string = "おはようございます"

これは、 `i` が明示的に `int` を値'7'として宣言していて、 `s` が `"おはようございます"` という値を持つ `string` を宣言していることをコンパイラに伝えます

次のスライドでGoがサポートする型の種類について説明します。

* 型

Goは、Java, C, C++, Pythonのように強く型付けされた言語です。Goには9種類の型があり、それらは:

- strings(文字列): `string`.
- signed integers(符号あり整数): `int8`, `int16`, `int32`, `int64`.
- unsigned integers(符号なし整数): `uint8`, `uint6`, `uint32`, `uint64`.
- aliases(エイリアス): `byte`, `rune`, `int`, `uint`.
- booleans(論理値): `bool`.
- IEEE floating point(浮動小数): `float32`, `float64`.
- Complex types(複素数型): `complex64`, `complex128`.
- Compound types(複合型): `array`, `slice`, `map`, `struct`.
- Pointer types(ポインタ型): `*int`, `*bytes.Buffer`.

* 文字列型

文字列は、Goプログラムで最も一般的なデータ型です。

文字列型は、他の言語で予想されるように動作します。

.play -edit src/strings/strings1/main.go /START OMIT/,/END OMIT/

文字列は `+` 演算子で _連結_ することができます。

- *Run* を押し、結果を見てください。

_注意_: Goでは空文字は `""` であり、 `null` や `nil` ではありません。

* 整数型

整数型は、Goで2番目に多く使用されます。

整数型には _符号あり_ と _符号なし_ の2つの型があります。

また、整数型はいくつかのサイズで表され、表現するビット数で表されます;

- Signed integers(符号あり整数): `int8`, `int16`, `int32`, `int64`.
- Unsigned integers(符号なし整数): `uint8`, `uint16`, `uint32`, `uint64`.

Goには2つの整数型があります

- `int` はプラットフォームに依存する `int32` または `int64` のエイリアスです。
- `uint` はプラットフォームに依存する `uint32` または `uint64` のエイリアスです。

そのサイズはGoプログラムをビルドするために使用したプラットフォームに依存します。

* 整数型 (続き)

なぜGoは非常に多くの種類の整数型をサポートしているのでしょうか？

異なる _サイズ_ の整数型は、異なる数の範囲に対応できます。

.play -edit src/types/types1/main.go /START OMIT/,/END OMIT/

このプログラムには2つの型エラーが含まれています。

- *Run* を押し、2つの型エラーを見てください。
- 宣言された `x` と `y` の型を変更してプログラムを修正してください。
- *Run* を押し、プログラムがコンパイルされ、正しい答えの `400` , `-7` を表示することをチェックして下さい。

* 関数

今度は _関数_ についてお話しましょう。

あなたが書いたGoの全ては、関数で構成されています。実際には、あなたははじめから関数を書いています。

.play -edit src/functions/functions1/main.go /START OMIT/,/END OMIT/

これは前の例と同じプログラムで、以前は隠されていた _関数宣言_ を表示しています。

- すべてのGoプログラムは `main` という関数で始まり、これを _main関数_ と呼びます。

* func

あなたは `func` 宣言で自分の関数を宣言することができます。

関数の名前は `const` や `var` のように有効な識別子でなければなりません。

.play -edit src/functions/functions2/main.go /START OMIT/,/END OMIT/

このプログラムは `main` と `hello` という2つの関数を宣言しています。

- `func`  `hello` 内の `println("こんにちは")` 文のコメントをはずして下さい。
- *Run* を押し、プログラムがコンパイルされ、こんちにはを3回表示することをチェックして下さい。

_注意_: `println` は提供されている _ビルトイン_ 関数です。宣言する必要はありません。

* 関数パラメータ

関数を便利にするため、関数に _引数_ を渡す必要があることがよくあります。

引数を関数に渡すには、引数の型と関数の _仮引数_ の型が同じでなければなりません。

.play -edit src/functions/functions3/main.go /START OMIT/,/END OMIT/

このプログラムでは、 `hello` に渡される引数の型が `name` パラメータの型と一致しません。

- `hello` の宣言を修正して、パラメータの型が提供された引数の型と一致するようにしてください。
- *Run* を押し、プログラムがコンパイルされ、 `こんにちは` `David` を表示することをチェックして下さい。

* Packages

パッケージとは、Goでソフトウェアを共有して再利用するユニットです。 すべてのGoコードはパッケージにまとめられています。

パッケージ内の各ソースファイルは、同じ `package` 宣言で始まらなければなりません。

パッケージの名前は、 `const`、` var`、 `func` のように、有効な識別子でなければなりません。

.play -edit src/packages/packages1/main.go

これは前のスライドと同じ例で、 `package` 宣言を示しています

`package`  `main` はプログラムのエントリポイント `func`  `main` を含むパッケージの名前です

* main packages

このプログラムは間違った `package` 宣言を持っています

.play -edit src/packages/packages2/main.go


- *Run* を押し、コンパイルエラーを観察します
- `package` 宣言を変更して、プログラムをコンパイルします
- *Run* を押して、プログラムが挨拶を印刷するかどうかを確認します

* Import

このセクションで最後に行う宣言は _import_ 宣言です。

`import` 宣言では、パッケージに他の _packages_ のコードを使用することができます。

パッケージを `import` すると、 _public_ 型、関数、変数、型、および定数がパッケージ名の接頭辞とともに使用できます。

time.Now	// timeパッケージのNow関数を示す

Note that

 import "fmt"
 import "time"

and

 import (
         "fmt"
         "time"
 )

どちらも `fmt` と `time` パッケージをインポートします。
構文は異なりますが、等価です。

* Import (cont.)

`import`宣言は、`package` 宣言の後、 `type`、` const`、 `var`、または `func` 宣言の前に書かなければなりません

.play -edit src/imports/imports1/main.go 

`import` 宣言が間違った場所にあるので、このプログラムはコンパイルされません

- `var`now` = `time.Now()`  `import` 宣言の後に移してください
- * Run* を押して、プログラムが現在時刻を表示していることを確認します

* Import (cont.)

パッケージに _public_ と _private_ の両方のシンボルが含まれています。 また、これらをそれぞれ _exported_ と _not_exported_ と呼びます

.play -edit src/imports/imports2/main.go 

このプログラムは、2つの _private_ シンボルを参照するのでコンパイルされません。

- `Println` と `Time` の大文字を使ってプログラムを修正してください。
- * Run* を押して、プログラムが現在時刻を表示していることを確認します。

_note_: このスライドを[[https://go-talks.golang.org/][gotalks.golang.org]]から実行している場合go-talkの制限により時間は `2009-11-10`23:00:00`+0000`UTC` となります。

* fmt package

このプログラムを覚えていますか？

.play -edit src/imports/imports3/main.go

ここでも `func`、`package` 、 `import` 宣言を示し、完全なGoプログラムになっています

このプログラムは `fmt` パッケージの `Println` 関数も使用しています。これは組み込みの `println` 関数よりも優れています。

- *Run* を押して、`fmt.Println` がこの出力をどのように出力するかを見てください。

*要約

ここまででGo言語の初歩的な基本文法は学んだはずです

コンテンツとしては以下の通りでしょう:

- 定数と変数を宣言する方法
- forループを書いて `if` を使う方法
- タイプの仕組み
- 独自の関数を書く方法
- パッケージと `import` ステートメントがどのように機能するか


* Advanced Syntax

* Advanced Syntax

This section builds on the previous by exploring each of the things we learnt in a little more detail.

In this section we'll use the Go Playground, a simple online code editor to perform our exercises.

* Coding style

All Go code is formatted according to a single style guide which is enforced with a tool called `gofmt`

Having one single style that all Go code is formatted in improves readability and avoids the time wasted arguing about code formatting.

"Gofmt's style is no one's favorite, yet gofmt is everyone's favorite."
.caption [[https://go-proverbs.github.io/][Go Proverb]].

The Go playground can format your code according to the canonical Go style.

- Follow [[https://play.golang.org/p/0Hz57BQdTA][this link]] and press the *Format* button to see this in action.

* Zero value

In previous examples we've written code like this

 var name = "go"
 var counter = 1

Which both _declares_ and _initalises_ the variables `counter` and `name` respectively. What happens if we have code like this?

.code src/zerovalue/zerovalue1/main.go

What will this print?

- Follow [[https://play.golang.org/p/jioUB0t_LW][this link]] and press the *Run* button to see this in action.

* Zero value (cont.)

In Go, there is no unitialised memory. The Go runtime will always ensure that the memory allocated for each variable is initalised before use.

If we write something like 

 var name string
 var counter int

Then the memory assigned to the variables `name` and `counter` will be zeroed, as we have not provided an _initaliser_.

- The value of `name` will be `""` because that is the value of a string with zero length.
- The value of `counter` will be zero, because that is the value of an `int` if we wrote `0` to its memory location.

* Zero value (cont.)

Every type in Go has an associated _zero_value_. The value of that variable if we wrote zeros to its memory.

- The zero value for integer types: `int`, `int8`, `uint`, `uint64`, etc, is `0`.
- The zero value for floating point types: `float32`, `float64`, `complex128`, etc, is `0.0`.
- The zero value for arrays is the zero value for each element, ie. `[3]int` is `0`, `0`, `0`.
- The zero value for slices is `nil`.
- The zero value for structs is the zero value for each field.

* Equality

As Go is a strongly typed language, for two variables to be equal, both their _type_and_their_value_ must be equal.

Trying to compare two variables of _different_ types is detected at runtime.

.code src/equality/equality1/main.go

- Follow [[https://play.golang.org/p/LwiJm2xuXK][this link]] and press the *Run* button.
- Fix the program by declaring `x` and `y` to be the _same_ type.
- Press the *Run* button and confirm the program now prints `true`.

* Type conversions

Sometimes you have variables of different integer types, you can _convert_ from one type to another using a conversion _expression_.

The expression `T(v)` converts the value `v` to the type `T`.

.code -edit src/types/types2/main.go

In this example the assignment of `y`=`x` fails because `x` and `y` are different integer types.

- Follow [[https://play.golang.org/p/wvG41C0lH4][this link]] and press the *Run* button.
- Fix the program by _converting_ `x` to an `int` with `int(x)`.
- Press the *Run* button and confirm the program now prints `700`.

* Type conversions (cont.)

If you have variables of different _widths_, you can _convert_ from one type to another.

.code -edit src/types/types3/main.go

- Follow [[https://play.golang.org/p/l4Q48pWAla][this link]] and press the *Run* button.
- Fix the program by _converting_ `x` to an `int64` with `int64(x)`.
- Press the *Run* button and confirm the program now prints `32000`.

* Type conversions (cont.)

We can do the opposite and convert a wider type to a narrower type.

.code -edit src/types/types4/main.go

- Follow [[https://play.golang.org/p/NbNwRjbmRu][this link]] and press the *Run* button. Does it print the answer you expected?
- Fix the program by _declaring_ `y` as an `int32`.
- Press the *Run* button and confirm the program now prints `64000`.

* Integer overflow

Whenever you declare a variable in Go, you have to choose how many bits of memory it will consume.

When you convert a variable with a _smaller_ number of bits to a variable with a larger number of bits, this is fine, because they all fit.

When you convert a variable with a _larger_ number of bits to a variable with a smaller number of bits there is a risk of truncation, because there are less bits available to represent your number.

- Follow [[https://play.golang.org/p/NbNwRjbmRu][this link]] and press the *Run* button. Does it print the answer you expected?
- Fix the program by reducing the value of `x`. Hint: the value needs to be less than 33,000.
- Press the *Run* button and confirm the program now prints `y` correctly.

* Short declaration syntax

As you've probably noticed, Go has several ways to declare variables. All three of these are the same

 var x = 0
 var x int = 0
 var x int

If you've come from a language like Ruby or Python, you're probably wondering if this very common operation can be made more concise. Indeed it can.

 x := 0

This is what we call a _short_declaration_, which is the same as 
 
 var x int = 0

Short declaration is very common in Go programs, you'll see it everywhere, so let's do some exercises to familarise you with its use.

* Short declaration syntax (cont.)

A common use of the short declaration syntax is in `for` loops. Consider this program

 var i int
 for i = 1; i < 11; i++ {
         fmt.Println(i)
 }

This can be also written as

 for i := 1; i < 11; i++ {
         fmt.Println(i)
 }

[[https://play.golang.org/p/3Vl75w72JO][This program]] contains two `var` declarations and two `for` loops.

- Follow [[https://play.golang.org/p/3Vl75w72JO][this link]] and press the *Run* button.
- Rewrite the program using the short declaration syntax; there should be no `var` declarations, only `:=`.

* Slices

The next kind of type to discuss is the _Slice_. 

A slice is an ordered collection of values of a _single_ type.

The syntax for declaring a slice variable is very similar to declaring a _scalar_ variable.

 var i int      // an int called i
 var j []int    // a slice of ints called j

In this example, 

- `i` is a variable of type `int`. 
- `j` is a variable of type `[]int`, that is, a slice of `int`.

Slices are very important in Go programs, so we'll spend a bit of time discussing them.

_note_: A slice is _not_ an array. Go also supports arrays, but you'll see later than they aren't very common, or very easy to use, so we won't discuss them at the moment.

* How large is a slice?

If I declare a slice, `[]int`, how many items can it hold?

The _zero_value_ of a slice is empty, that is, it has a _length_ of zero; it can hold 0 items.

.code -edit src/slices/slices1/main.go

We can retrieve the length of a slice with the built-in `len` function.

- Follow [[https://play.golang.org/p/gZYvdE2zbT][this link]] and press the *Run* button.
- Did you guess the right answer?

* Making a slice

We can create a slice with space to hold items using the built-in `make` function.

.code -edit src/slices/slices2/main.go

In this example, on the first line `var i []int` declares `i` to be a slice of `int`.

On the second line, `i` is _assigned_ the result of `make([]int,`20)`.

- Follow [[https://play.golang.org/p/i_IWqjik6u][this link]] and press the *Run* button.
- Did `fmt.Println(len(i))` print the result you expected?

* Making a slice (cont.)

Because declaring a slice variable and initalising it with `make` is a common operation, it is common to see the _short_variable_declaration_ used to combine this operations.

.code -edit src/slices/slices3/main.go

This example declares `i` _and_ initalises it to be a slice of `int` with a length of 20.

- Follow [[https://play.golang.org/p/b92SJ0Gx9s][this link]] and press the *Run* button.
- Did `fmt.Println(len(i))` print the result you expected?

* Slice exercises

Let's do a quick exercise to familarise yourself with using slices.

.code -edit src/slices/slices4/main.go

- Follow [[https://play.golang.org/p/AJk1Jgp1iE][this link]] for instructions.
- Declare a variable called `i` which is a slice of 5 `int`.
- Declare a variable called `f` which is a slice of 9 `float64`.
- Declare a variable called `s` which is a slice of 4 `string`.
- Does your program print the expected result, `5`9`4`?

* Index expressions

To access, or assign, the contents of a slice element at index `i`, use the form `s[i]`.

Slices are zero indexed, so `s[0]` is the 1st element, `s[1]` is the second element, and so on.

When the _index_expression_ appears on the _left_hand_side_ of the equals operator, `=`

 s[7] = 20

We are assigning the number 20 to the 8'th element of the slice `s`.

When the _index_expression_ appears on the _right_hand_side_ of the equals operator, `=`

 x := s[7]

We are assigning the value at the 8th element of `s` to the variable `x`.

* Slice zero value

We saw earlier that the _zero_value_ of the slice

 var s []int

was and empty slice, a slice with length of zero.

What is the value of each of the elements of a newly created, with make, slice?

.play -edit src/slices/slices5/main.go

- Follow [[https://play.golang.org/p/kGh_C1l6KW][this link]] and press the *Run* button.
- Did the program print the result you expected?

* Slice initialisation

We want to create an `[]int` slice of the first 10 prime numbers, how could we do this?

One solution could be to create the slice and assign a value to each element in the slice.

.play -edit src/slices/slices6/main.go

* Slice initialisation (cont.)

Doing this manually is verbose and boring; how would you do this for the first 50 primes?

Go supports a method of assignment where we both _declare_ and _initalise_ the slice at once.

.play -edit src/slices/slices7/main.go

This is called the _composite_literal_ syntax.

- Follow [[https://play.golang.org/p/P-eBqzPCWh][this link]] and complete the exercise.

* append

So far we've been using slices with a known length. You can extend the contents of a slice with the built-in `append` function.

.play -edit src/slices/slices8/main.go

`append` increases the length of the slice to accommodate the new items, then returns a new slice value.

You can `append` multiple values in one statement, providing they are all the same type.

.link https://blog.golang.org/slices Further reading: Arrays, slices (and strings): The mechanics of 'append' (blog.golang.org)

* Subslices

What if we have a large slice, and want to refer to only a part of it. 

We call this slicing a slice, or _subslicing_.

Subslicing looks similar to the _indexing_ operation we saw a few slide ago, except it refers to a range of slice indexes.

.play -edit src/slices/slices12/main.go

The expression `brothers[0:3]` evaluates to a slice of the 1st to 3rd Marx brother.

- Follow [[https://play.golang.org/p/d1-jl42aTF][this link]] and complete the exercise.

* Subslices (cont.)

An important thing to remember when slicing a slice, is that both slices refer to the _same_ underying data.

.play -edit src/slices/slices10/main.go

To create two independent slice values, you would use the `copy` function, which we'll discuss later.

* Bounds checking

Each slice has a length which is decided when it is made.

You can increase the length of the slice with the `append` function, and create a smaller slice from a larger one using the slice operator.

What happens if you accidentally exceed the bounds of the slice?

.play -edit src/slices/slices11/main.go

- Follow [[https://play.golang.org/p/mIWm0a1amp][this link]] and press the *Run* button.
- Comment out `fmt.Println(primes[-1])` and see what happens.

* Multiple assignment

Go allows you to perform multiple assignments and declarations in one statement.

For example, if we wanted to declare, `x`, `y`, and `z`, with the values `1`, `2`, and `3` respectively. We could write

 var x = 1
 var y = 2
 var z = 3

We can write the same thing like this

 var x, y, z = 1, 2, 3

- Follow [[https://play.golang.org/p/d2hDJQAfkt][this link]] for some examples of multiple declaration.

* Multiple return values

Multiple assignment is important to understand because you can return multiple values from a function.

 func f(i int)

This is a function declaration for `f` which takes one argument, an `int`.

 func g(i int, j int, k string) int

This is a function declaration for `g`, which takes three arguments, two `int` s and a `string`, and returns an `int`.

 func h(i, j int) (int, int, string)

This is a function declaration for `h`, which takes two arguments, two `ints`, and returns three values, two `int` s and a `string`.

* Multiple return values (cont.)

Your program must return the number of values specified in the function signature.

.play -edit src/functions/functions4/main.go

* Assigning multiple return values

When you call a function that returns multiple values, you must assign _all_ of them or _none_ of them.

 func f() (int, bool, string)

 func main() {
         a, b, c := f()
         fmt.Println(a, b, c)
 }

`f` returns three values, so we assign them to `a`, `b`, and `c` using the short declaration syntax.

If we wanted to use only the first and third values we can ignore the second by assigning it to the underscore variable, `_`.

 func main() {
         a, _, c := f()
         fmt.Println(a, c)
 }

* Maps

Go has a built in Hash Map type, called a `map`.

Maps map values of key type K to values of type V

 var m map[string]int

Just like making a slice, making a map is accomplished with the `make` built-in.

.play -edit src/maps/maps1/main.go

* Inserting values into a map

Inserting a value into a map looks similar to assigning a value to a slice element.

.play -edit src/maps/maps2/main.go

If an entry already exits with that key, it will be overwritten.

- Follow [[https://play.golang.org/p/a-V5I0nZ5l][this link]] and complete the exercise.

_note_: maps are always _unordered_.

* Compact literal initalisation

Just like slices, maps support compact literal initalisation, which declares and initalises the map.

.play -edit src/maps/maps3/main.go

* Retrieving a values from a map

Just like a slice, you can retrieve the value stored in a map with the syntax `m[key]`.

If it is present the value will be returned, if not the _zero_value_ will be returned.

.play -edit src/maps/maps4/main.go

* Checking if a map value exists

In the previous slide we saw that `moons["Neptune"]` returned `0`.

How can we tell if Neptune actually has no moons, or if `0` was returned because there is no entry for Neptune?

Map look ups support a second syntax.

.play -edit src/maps/maps5/main.go

* Deleting a value from a map

To delete a value from a map, you use the built in `delete` function.

.play -edit src/maps/maps6/main.go

* Iterating over a map

If we wanted to print out all the values in a map we can use a form of the `for` syntax which is known as `range`.

.play -edit src/range/range1/main.go

`range` loops over each entry in the map, assigning the map key to `name`, and the map value to `pop`.

* Range over slices

We say previously that `for`range` works with maps, it also works with slices.

.play -edit src/range/range2/main.go

- Follow [[https://play.golang.org/p/AmQW-OrPC1][this link]] and complete the exercise.
- If you cannot figure it out, don't worry, there is an answer on the next slide.

* Switch

If you completed the previous exercise you may have written something like this

.play -edit src/range/range2a/main.go /START OMIT/,/END OMIT/

Heavily nested `if`else`if` blocks are discouraged in Go.

Instead we can use the other condition statement, `switch`.

* Switch (cont.)

`switch` can be used 

.play -edit src/switch/switch1/main.go /START OMIT/,/END OMIT/

* fmt

Let's conclude this section by talking about the fmt package.

`fmt` standard for formatted printing; the name is inherited from Go's Plan 9 legacy.

We've use `fmt.Println` a lot up to this point, but the `fmt` package has many other useful functions.

We'll focus on `fmt.Printf`, the `f` stands for _formatted_output_.

Here is an example.

.play -edit src/fmt/fmt1/main.go /START OMIT/,/END OMIT/

- Follow [[https://play.golang.org/p/UuzPWcwDrE][this link]] to experiment.

* Formatting verbs

If you're used to languages like Python or C, you're probably used to the idea of _formatting_verbs_.

The `fmt` package supports a large number of formatting verbs and modifiers. In the previous example you saw `%s` and `%d`, for `string` and `int` respectively.

The `fmt` package is smart enough to spot when you use the wrong formatting verb, or don't provide enough arguments to `fmt.Printf`.

.play -edit src/fmt/fmt2/main.go /START OMIT/,/END OMIT/

* Formatting verbs (cont.)

Having to choose the correct verb that matches the type of the value you want to print is boring.

To make it easier to use `fmt.Printf` in the simple case, you can use the `%v` verb, which know how to print _any_ value.

.play -edit src/fmt/fmt3/main.go /START OMIT/,/END OMIT/

- Follow [[https://play.golang.org/p/B-E7JOJ1Db][this link]] to experiment with a few more formatting verbs.

* Recap

Now you know most of Go!

You've learnt:

- How Go code is formatted.
- How what the zero value is and how it works.
- Equality and type conversions
- The short declaration syntax
- Multiple assignment.
- How slices work.
- How maps work.
- How the `fmt` package works.

Time for lunch!

* Development environment and tooling

* Development environment and tooling

This section focuses on the developer experience

- Installing Go.
- Setting up a `$GOPATH` workspace.
- Introduction to the `go` command.
- Writing unit tests with the go test command.

* Installing Go

The next few slides give examples of how to install Go on various systems.

The official installation documentation is here:

.link https://golang.org/doc/install

The current version of Go is 1.7.4.

- New minor releases, Go 1.8, Go 1.9, etc, ship twice a year. 
- Historically 2–4 bug fix or security releases occur during each six month period.

* Installing Go on OS X

Installing Go on OS X (also known as `darwin`) can be accomplished with

*Mac*OS*Installer*

The Go project provides an `.pkg` installer, use:

.link https://storage.googleapis.com/golang/go1.7.4.darwin-amd64.pkg

*Homebrew*

If you use Homebrew to manage third party software on your Mac, use:

 brew install golang

*MacPorts*

If you use MacPorts to manage third party software on your Mac, use:

 sudo port install go

* Installing Go on Windows

*MSI*Installer*

The Go project provides a `.msi` installer for 32bit and 64bit Windows, use:

.link https://storage.googleapis.com/golang/go1.7.4.windows-amd64.msi Windows 64bit MSI installer
.link https://storage.googleapis.com/golang/go1.7.4.windows-386.msi Windows 32bit MSI installer

*.zip*file*

The Go project provides a `.zip` file of the Go compiler and standard library, use:

.link https://storage.googleapis.com/golang/go1.7.4.windows-amd64.zip Windows 64bit zip file
.link https://storage.googleapis.com/golang/go1.7.4.windows-386.zip Windows 32bit zip file

Unzip the zip file and place it at `C:\Go`.

* Installing Go on Linux

Depending on your Linux distribution they may have an up to date version of Go, but this is rare.

The most reliable way to install the latest version of Go is to untar

.link https://storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gz

to the directory

 /usr/local

and add 
 
 /usr/local/go/bin

to your `$PATH`.

 echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bash_profile

* Go tool

Your Go installation comes with a tool we call the `go` tool, because that's its name.

The `go` tool can 

- compile your programs
- run your tests
- display documentation for a package
- fetch packages from the internet.

* $GOPATH

The `go` tool works inside a workspace where _all_ your Go source code is stored.

All the source code for this workshop is included with this repository.

You can set `$GOPATH` to be the base directory where you checked out this repository. eg.

 % export GOPATH=$HOME/introduction-to-go

Using a workspace allows you to import code from other packages with a fixed name. eg.

 import "github.com/pkg/profile"

Will import the code for the `profile` package stored in

 $GOPATH/src/github.com/pkg/profile

* go build

Go is a compiled language, so the usual work flow is 

- Edit code
- `go`build`
- Run program

Let's try building a Go program

- `cd`$GOPATH/src/helloworld`
- Read the source for `hello.go`
- Build the source with `go`build`
- Run the program `./helloworld`

* What time is it (exercise)

Let's write a clock, a program that prints out the current time

- `cd`$GOPATH/src/whattimeisit`
- edit `main.go` and finish the program (if you get stuck the answer is in `answer.go`)
- Build the program with, `go`build` (if you make an error, go back and edit `main.go`)
- Run your program `./whattimeisit`, it should print something like this

 The current time is 2016-12-05 12:33:18.222821474 +0900 JST

* Testing

I wanted to spend some time on testing because for the rest of the day we'll be using tests to complete code katas.

The testing package can also contain benchmark functions and examples, which show up in godoc.

You should include tests for each package that you write.

The `testing` package is ideal for _unit_tests_. It's _ok_ for functional tests, but not really suitable for complex integration tests.

* go test

`go`test` is the unit testing framework built into the Go standard library. It lives in the `testing` package.

Tests live in `_test.go` files, eg. the `strings` package has these files:

- `strings.go` functions to manipulate UTF-8 encoded strings.
- `strings_test.go` tests for the `strings` package.

Each test is a function in the form

 func TestNameOfTest(t *testing.T) { ... }

- `NameOfTest` is the name of your test, it _must_ start with an upper case letter.
- Test functions take a `testing.T` value, which provides helpers like `t.Error` and `t.Fail`.

* Writing tests

Let's write some tests using our own version of the strings package, called `simplestrings`.

- The code for this exercise is in `$GOPATH/src/simplestrings/`
- Read the source code for `simplestrings.go`

Together we'll write some tests for the functions in our `simplestrings` package.

We'll use the test coverage (see next slide) tool to check our work.

* Test coverage

`go`test` can report coverage

 go test -coverprofile=cover.out

This produces a coverage file, `cover.out`

- `go`tool`cover`-func=cover.out` will print the coverage report
- `go`tool`cover`-html=cover.out` will open the report in a browser

_Protip_: I use these little shell functions to make this easier

 cover () {
   t=$(mktemp -t cover)
   go test $COVERFLAGS -coverprofile=$t $@ && go tool cover -func=$t && unlink $t
 }

 cover-web() {
   t=$(mktemp -t cover)
   go test $COVERFLAGS -coverprofile=$t $@ && go tool cover -html=$t && unlink $t
 }

* The standard library

Go ships with a rich standard library of packages. This includes

- file input / output
- string handling
- compression
- encoding and decoding of JSON and XML
- network handling
- HTTP client and server

* Katas

For the rest of the day let's practice writing Go code together.

The Ruby community have a tradition of _code_katas_, small exercises to make the test pass.

As we work through the katas, we'll visit some more of the Go standard library.

* String formatting

As a warm up, let's do a small kata together. 

The code for this kata is in `$GOPATH/src/katas/sprintf`

If you get stuck, the answers are in `$GOPATH/src/katas/sprintf/answers_test.go`.

* Structs

So far we've discussed two kinds of types; _primitive_ types and _slice_ types.

Go supports what we call _compound_ types, that is, types that are _composed_ of other types. 

These are called _struct_ (for _structure_) types. We declare a struct like this:

 type Point struct {
          X int
          Y int
 }

`Point` is a position in two dimensional space, it has two fields, `X` and `Y`.

- Follow [[https://play.golang.org/p/fAnPV1MojK][this link]] to complete the example

* Methods

To this point we've talked about functions, which belong to a package

 // Max returns the larger of a or b.
 func Max(a, b int) int

In Go, you can attach a function to a type that you declare, this is called a _method_.

 type Point struct { X, Y int }

 func (p Point) String() string {
          return fmt.Sprintf("point: x=%d, y=%d", p.X, p.Y)
 }

Any type that implements a `String()`string` method will be used by the `fmt` package when it prints the value.

- Complete the kata in `$GOPATH/src/katas/methods` by making all the tests pass.

* Pointers

Whenever you pass a value to a function or method, the value is _copied_.

In Go, the method's receiver is also a value, so it's copied when you call a method.

.play -edit src/pointers/pointers1.go /START OMIT/,/END OMIT/

- Complete the kata in `$GOPATH/src/katas/pointers` by making the test pass.

* Interfaces

Go is an object oriented language; we have methods on types, but Go does not support inheritance or sub-classes.

Go supports polymorphism, _has_a_ (not _is_a_) with _interfaces_.

An interface declaration looks like this:

 type Reader interface { 
          Read(buf []byte) (int, error) 
 }

This is the [[https://golang.org/pkg/io/#Reader][`io.Reader`]] interface declaration from the [[https://golang.org/pkg/io/][`io`]] package.

Go does not have an _implements_ keyword, any type with the correct set of methods _is_ an implementation of the interface.

* Reading input

This kata asks you to write a function that reads lines from an io.Reader and returns a string containing all the lines read.

The code for this kata is in `$GOPATH/src/katas/input`

* Readers

To familarise you with the `io.Reader` implementations available in the `io` package, this kata is all about Readers.

- Complete the kata in `$GOPATH/src/katas/readers` by making the test pass.
- If you get stuck, consult the documentation in the [[https://golang.org/pkg/io/][`io`]] package.

* Error handling

You probably spotted that lots of methods and functions in the Go standard library return a value of type `error`. 

`error` is a _predeclared_type_, just like `int`, `string`, etc.

`error` is an interface, it's declaration is

 type error interface {
         Error() string
 }

Any type that has an `Error()`string` method, _implements_ the `error` interface.         

* Nil

`nil` is Go's version of `NULL`, `null`, `void`.

- The zero value of an interface type is `nil`.
- The zero value of a pointer type is `nil`.

Go uses the `error` interface and a simple convention to implement error handling.

- If no error occurs, the `err` value returned from a function or method will equal nil.
- If an error occurs, the `err` value returned from a function or method will not equal nil.

 if err != nil {
          // cleanup and handle error
 }

* Counting the number of lines in a file

Now we know about `io.Reader`'s, `error`'s, we can write some more useful programs.

The code for this kata is in `$GOPATH/src/katas/countlines`

_Note_:

- `go`test` always executes from the package's source directory, this makes it simple to include fixtures for your tests.
- The go tool ignores any directory called `testdata`, or starts with a `.` or `_`.

* defer

In `CountLines` from our previous example, if an error happened during reading lines, `f` may not be closed.

Go has a keyword `defer` to ensure operations _always_ happen.

.code -edit src/defer/defer1.go /START OMIT/,/END OMIT/

* Error handling (cont.)

In the previous counting example, if an error happened, the program would exit.

In this kata, we'll handle errors by returning them to the caller.

The code for this kata is in `$GOPATH/src/katas/errorhandling`

* Passing in a reader

Let's turn out `Countlines` function into a program.

The code for this kata is in `$GOPATH/src/katas/linecount`

Complete the program so it reads the number of lines sent to it via stdin.

 % cat testdata/moby.txt | ./linecount 
 22659

* Handling multiple files

Let's extend our `linecount` program to handle files passed on the command line.

The code for this kata is in `$GOPATH/src/katas/countmanyfiles`

Complete the program so it counts the lines in files passed via the command line.

 % ./countmanyfiles testdata/*.txt
 testdata/dracula.txt    15973
 testdata/pride-and-prejudice.txt        13427
 testdata/sherlock.txt   13052

* Reading all the *.txt files in a directory

In the previous example we used the shell to list files to process.

In this kata, let's extend our `countmanyfiles` program to walk the directory listing itself.

To do this we use the [[https://golang.org/pkg/os/#File.Readdir][`ReadDir`]] method on [[https://golang.org/pkg/os/#File][`os.File`]].

_Note_: Be careful to only read _files_, not directories, and do not read files that don't end in `.txt`

The code for this kata is in `$GOPATH/src/katas/countdir`

Complete the program so it counts the lines in files passed via the command line.

 % ./countdir testdata/
 testdata/christmas-carol.txt    4236
 testdata/tom-sawyer.txt 9209

* Let's take a break

* HTTP request

The Go standard library supports writing HTTP clients and servers with the [[https://golang.org/pkg/net/http/][`net/http`]] package.

Using the `net/http` package is very straight forward:

 resp, err := http.Get("http://example.com/")
 if err != nil {
         // handle error
 }
 
`resp` is a [[https://golang.org/pkg/net/http/#Response][`http.Response`]] structure, which has lots of interesting fields.

Let's write a simple HTTP client that can fetch HTTP URLs.

 % ./httpget http://httpbin.org/ip
 {
   "origin": "125.203.122.114"
 }

The code for this kata is in `$GOPATH/src/katas/httpget`

* JSON parsing

The service at `http://httpbin.org/` returns JSON bodies.

The [[https://golang.org/pkg/encoding/json/][`encoding/json`]] package can decode JSON data into a map.

 result := make(map[string]string)
 dec := json.NewDecoder(resp.Body)
 err := dec.Decode(&result)
 if err != nil {
         // handle error
 }

Let's use this to write a program that will tell us our public IP address.

 % ./whatismyip 
 My IP address is: 125.203.122.114

The code for this kata is in `$GOPATH/src/katas/whatismyip`

* JSON encoding

If you're writing a RESTful web service it's common to have to return JSON encoded data.

In Go the [[https://godoc.org/encoding/json][`encoding/json`]] package can turn Go maps and data structures into JSON.

.play -edit src/jsonenc/jsonenc1.go /START OMIT/,/END OMIT/

* Controlling JSON encoding

The `encoding/json` package requires the fields of a struct to be public (start with an upper case letter), this means the keys in your JSON document will be upper case.

We can fix this and control the output of the JSON with a _tag_.

The format of the JSON tag is documented on the [[https://golang.org/pkg/encoding/json/#Marshal][`json.Encode`]] method.

.play -edit src/jsonenc/jsonenc2.go /START OMIT/,/END OMIT/

* JSON encoding kata

The code for this kata is in `$GOPATH/src/katas/jsonenc`

* Writing HTTP servers

Go's [[https://golang.org/pkg/net/http][`net/http`]] library can be used to write production web applications.

Writing web servers in Go can be as simple as a few lines. Here is an example:

.play -edit src/http/http1.go

* Writing http servers (cont.)

This is a simple HTTP handler

 func index(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintln(w, "This is the index page")
 }

it takes two parameters

- `w`, a `http.ResponseWriter` which is used to send data to the client
- `r`, a `http.Request` which contains the uri, query parameters, and request body.

 mux := http.NewServeMux()

`http.NewServeMux` returns a `ServeMux`, what we usually call a HTTP router.
 
* Writing http servers (cont.)

 mux.HandleFunc("/", index)

Registers our `index` function, with the top level route, `"/"`.

 http.ListenAndServe(":8000", mux)

Opens a socket on port 8080 and sends and requests to our `mux` (our router).

`http.ListenAndServe` won't return unless something happens to that listening socket (wifi drops, cable unplugs)

* go get

`go`get` is a simple wrapper around `git` that knows how fetch packages from GitHub (and a few other places).

If a package's import path follows the `go`get` convention, `go`get` knows how to fetch the source code and download it to your `$GOPATH`.

`go`get` isn't a complete dependency manager like rubygems or npm, etc, but it good enough for writing many applications.

We'll use `go`get` to fetch the source for `gorilla/mux`, a more advanced HTTP router

 % go get github.com/gorilla/mux 
 % ls $GOPATH/src/github.com/gorilla/mux
 LICENSE                 context_gorilla.go      context_native_test.go  mux_test.go
 README.md               context_gorilla_test.go doc.go                  old_test.go
 bench_test.go           context_native.go       mux.go                  regexp.go
 route.go

* Using gorilla/mux

The standard HTTP router, `http.ServeMux` is quite basic, so we'll upgrade to the `gorilla/mux` http router.

.play -edit src/http/http2.go

* Line counting HTTP service

Let's write a HTTP service that counts the lines in a book via http.

Features:

- When the client requests `/books/{book}` we look up the book and return the number of lines counted.
- The response to the client should be in JSON format and include the number of lines and the title of the book.
- Book directory is configurable.

 % ./httplinecount ../../../books/ &
 [1] 17554
 % curl http://localhost:8080/books/moby.txt
 {"title":"moby.txt","lines":"22659"}

The code for this kata is in `$GOPATH/src/katas/httplinecount`

* Time for a break

* Documenting packages with comments

Go code is traditionally documented with comments in the source code. This is similar to Python's heredoc convention.

Here are some examples

 // simplestrings provides simple helper functions to work with strings
 package simplestrings

 // APIVersion is the version of this package's API
 const APIVersion = 3

 // NextID returns the next ID in the sequence
 func NextID() uint64 { ... }

_Notes_

- Comments directly precede the thing they apply to, don't put an extra newline in between the comment and the symbol
- You should comment both Public and private symbols, but godoc will only show you the documents

* Scope

We've talked about all the ways to declare a variable in Go, now we need to discuss scope.

.code -edit src/scope/scope1/main.go

This program declares `x` four times. All four `x` 's are _different_ because they exist in different scopes.

- Follow [[https://play.golang.org/p/nIcOXVXgwl][this link]] and press the *Run* button.

* Scope (cont.)

The scope of a declaration is bound to the closest pair of curly braces, `{` and `}`.

.code -edit src/scope/scope2/main.go

In this example, we declare `x` to be 100 inside `main`, and 200 inside `f`.

- Follow [[https://play.golang.org/p/Xfi3GOhTiC][this link]] and press the *Run* button.
- Did the program print what you expected?

* Scope (cont.)

What do you expect this program will print?

.code -edit src/scope/scope3/main.go

- Follow [[https://play.golang.org/p/7uxrebFzmK][this link]] and press the *Run* button.
- Did you guess the right answer?

* Scope (cont.)

What do you expect this program will print?

.code -edit src/scope/scope4/main.go

- Follow [[https://play.golang.org/p/7hpZre9LhI][this link]] and press the *Run* button.
- Did you guess the right answer?

* Shadowing

What you are seeing is called _shadowing_.

.code -edit src/scope/scope5/main.go /START1 OMIT/,/END1 OMIT/

Most of you will be comfortable with a _function_scoped_ variable shadowing a _package_scoped_ variable.

.code -edit src/scope/scope5/main.go /START2 OMIT/,/END2 OMIT/

But a _block_scoped_ variable shadowing a _function_scoped_ variable may be surprising.

* Question time

* Question time

This is your time for questions

Ask me anything!

* Conclusion

* Conclusion

Thank you very much for participating today, I hope that you enjoyed yourself and are encouraged to learn more about Go.

I would like to recommend several online resources:

.link https://dave.cheney.net/resources-for-new-go-programmers Resources for new Go programmers
.link https://tour.golang.org/welcome/1 tour.golang.org
.link https://gobyexample.com/ Go by Example

I would like to recommend two books:

.link https://www.amazon.co.jp/exec/obidos/ASIN/4621300253 プログラミング言語Go
.link https://www.amazon.co.jp/exec/obidos/ASIN/477418392X/ みんなのGo言語【現場で使える実践テクニック】
